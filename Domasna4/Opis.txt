
Нашата апликација применува Model-View-Controller (MVC) архитектурен со помош на Spring Boot,
што овозможува раздвојување на кодот во три клучни делови: Model (Модел), View (Поглед)
и Controller (Контролер). Оваа архитектура обезбедува чист и уреден код, способен за
одржување и проширување.

Во рамките на нашата апликација, освен MVC, користиме и Singleton design pattern.
За класите кои се анотирани со @Component, @Service, @Controller, @Repository и
класите каде што директно се применува(Translator и WineryParser), се користи овој pattern.
Кога оваа анотација се користи, Spring IoC контејнерот креира само една инстанца од дадената класа,
истата инстанца која се користи во целата апликација.

Овој Singleton пристап обезбедува централизирано управување на инстанците на класите,
што значи дека ресурсите се управуваат ефикасно и едноставно. Според Spring принципите,
Singleton Bean-овите се интегрираат автоматски во различните компоненти на апликацијата,
што овозможува лесна соработка и комуникација меѓу различните делови на кодот.

Со користењето на овие design patterns и SOLID принципи, не само што се подобрува управливоста
на кодот, туку и се креира подобар основ за развој на квалитетни и ефикасни апликации.
Овие patterns допринесуваат кон развојот на нашата апликација и нивната употреба обезбедува
подобро организиран, модуларен и лесно одржуваен код.